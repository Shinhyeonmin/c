define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	//EOF== end of file(데이터의 마지막 부분)

	/*do while 문
	do
	{여기에 실행할 문장을 적고;}
	while
	{여기에 while 문을 적는다;}*/

	/*int i = 10;
	while (1)
	{
		i--;
		if (i == 0)
			break;
		if (i % 2 == 0)
			continue;
		// 여기서 continue는 밑에 있는 식들은 실행하지 않고 그 위로 올라가서 실행을 시킨다. 
		//결국 9,7같은 수는 보이지만 짝수는 출력이 안됨
		printf("%d",i)
	}*/
	
	/*
	for (초기식; 조건식; 증감식)
	{
	실행문;}
	*/

	//영수증
	/*int X, N;
	scanf("%d %d", &X, &N);
	int plus = 0;

	for (int i = 0; i < N; i++)
	{
		int a, b;
		scanf("%d %d", &a, &b);
		plus += a * b;
	}

	if (X = plus)
		printf("Yes");
	else
		printf("No");*/

	//숫자 맞추기
	/*int a = 60;
	int b;
	printf("숫자를 맞춰보세요");
	scanf("%d", &b);
	
	int c = 0;
	if (a == b)
		printf("정답입니다. 맞추는데 걸린 횟수: 1회");
	else
	{
		if(a < b)	printf("작습니다\n");
		else   printf("큽니다\n");
		c++;
		while (a != b)
		{
			printf("숫자를 맞춰보세요:\n");
			scanf("%d", &b);
			if (a < b)	printf("작습니다\n");
			else   printf("큽니다\n");
			c++;
		}
		printf("정답입니다. 맞추는데 걸린 횟수: %d", c);
	}*/

	//함수
	/*
	모듈 == 함수
	ex) int main(void)
	
	함수는 항상 실행된 곳으로 return 한다.
	ex) main 함수는 운영체제에서 실행을 시키므로 항상 운영체제로 return 함.*/

	//#define pi=3.14 ->이러면 pi의 값이 정해짐. 바꿀 수 없음 (전처리 과정)
	//함수를 작성할때 함수들을 위에 작성해야 파일에서 오류가 안 생기는데 그러면 main 함수가 뭔지 알 수 없음
	//==> 만약 함수가 int func() {}이라면 함수를 main 밑에 적고 int func()만 위에 적기(그러나 전처리 과정 XX)
	return 0;
}
