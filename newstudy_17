#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

//대충만든 자판
/*int* solution(const char* keymap[], size_t keymap_len, const char* targets[], size_t targets_len) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    
    int num[26] = {0};//알파벳 크기 만큼 만들기
    for (int i = 0; i < 26; i++)
    {
        num[i] = 101;
    }

    for (int i = 0; i < keymap_len; i++) //알파벳 순서대로 최소값들 저장하기
    {
        for (int j = 0; j < strlen(keymap[i]); j++)
        {
            
            num[keymap[i][j] - 'A'] = (num[keymap[i][j] - 'A'] < j + 1) ? num[keymap[i][j] - 'A'] : j + 1;
        }
    }
    
    //출력(?)-곧 주석으로 바꿈
    //for (int i = 0; i < 26; i++)
    //{
    //    printf("%c = %d\n",i+'A', num[i]);
    //}

    //이제 num에 있는 최소값을 활용해서 값 정하기
    int* answer = (int*) malloc(targets_len*sizeof(int));

    for (int j = 0; j < targets_len; j++)
    {
        int total = 0;
        for (int i = 0; i < strlen(targets[j]); i++)
        {
            if (num[targets[j][i]-'A'] == 101)
            {
                total = -1;
                break;
            }
            else
            {
                total = total + num[targets[j][i] - 'A'];
            }
        }
        //printf("%d ", total);
        answer[j] = total;
    }
    return answer;
}*/

//달리기 경주
char** solution(const char* players[], size_t players_len, const char* callings[], size_t callings_len) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    
    char* people;

    for (int i = 0; i < callings_len; i++)
    {
        people = callings[i];
        for (int j = 0; j < players_len; j++)
        {
            if (strcmp(players[j], people)==0)
            {
                players[j] = players[j - 1];
                players[j - 1] = people;
            }
        }
    }
    //char** answer = (char**)malloc(1);
    return players;
}

int main(void)
{
    //대충만든 자판
    /*char* keymap[] = {"ABACD", "BCEFD"};

    char* targets[] = { "ABCD","AABB" };
    
    int keymap_len = sizeof(keymap)/sizeof(keymap[0]);
    int targets_len = sizeof(targets)/sizeof(targets[0]);

    int* result = solution(keymap, keymap_len, targets, targets_len);
    for (int i = 0; i < targets_len; i++)
    {
        printf("%d ", result[i]);
    }*/

    //달리기 경주
    char* players[] = { "mumu", "soe", "poe", "kai", "mine" };
    char* callings[] = { "kai", "kai", "mine", "mine" };

    int players_len = sizeof(players) / sizeof(players[0]);
    int callings_len = sizeof(callings) / sizeof(callings[0]);

    char** results = solution(players, players_len, callings, callings_len);

    for (int i = 0; i < players_len; i++)
    {
        printf("%s\n", results[i]);
    }

    return 0;
}
